plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.170' apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'net.neoforged.gradle.userdev'

    version = mod_version
    group = mod_group_id

    repositories {
        mavenLocal()
    }

    java{
        toolchain.languageVersion = JavaLanguageVersion.of(javaLanguageVersion)
        withSourcesJar()
    }

    base {
        archivesName = mod_archivesName
    }

    configurations {
        runtimeClasspath.extendsFrom localRuntime
    }

    sourceSets.main.resources { srcDir 'src/generated/resources' }

    dependencies {
        implementation "net.neoforged:neoforge:${neo_version}"
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            modSource sourceSets.main
        }
        client {
            workingDirectory file("${rootProject.rootDir}/runs/client")
        }
        clientWithMods {
            run 'client'
            workingDirectory file("${rootProject.rootDir}/runs/clientWithMods")
        }
        server {
            workingDirectory file("${rootProject.rootDir}/runs/server")
        }
        serverWithMods {
            run 'server'
            workingDirectory file("${rootProject.rootDir}/runs/serverWithMods")
        }
        gameTestServer {
            workingDirectory file("${rootProject.rootDir}/runs/gameTestServer")
        }
        data {
            workingDirectory file("${rootProject.rootDir}/runs/data")
            arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    tasks.withType(ProcessResources).configureEach {
        var replaceProperties = [
                minecraft_version         : minecraft_version,
                minecraft_version_range   : minecraft_version_range,
                neo_version               : neo_version,
                neo_version_range         : neo_version_range,
                loader_version_range      : loader_version_range,
                mod_id                    : mod_id,
                mod_name                  : mod_name,
                mod_license               : mod_license,
                mod_version               : mod_version,
                mod_authors               : mod_authors,
                mod_description           : mod_description,
                fiercesource_version_range: fiercesource_version_range,
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/neoforge.mods.toml']) {
            expand replaceProperties
        }
    }

    publishing {
        publications {
            register('mavenJava', MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url = "file://${project.projectDir}/repo"
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}